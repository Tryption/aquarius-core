<?php 
/** Message generated by action to be displayed to user
  **/
class AdminMessage {
    function __construct($type) {
        $this->type = $type;
        $this->parts = array();
    }

    static function with_line($type, $line) {
        $args = func_get_args();
        $message = new self(array_shift($args));
        call_user_func_array(array($message, 'add_line'), $args);
        return $message;
    }

    static function with_html($type, $html) {
        $args = func_get_args();
        $message = new self(array_shift($args));
        call_user_func_array(array($message, 'add_html'), $args);
        return $message;
    }

    static function with_raw_lines($type, $lines) {
        $message = new self($type);
        foreach($lines as $line) {
            $message->parts []= array(
                'type'  => 'line',
                'text' => $line
            );
        }
        return $message;
    }

    // Process legacy messages into strings
    static function process_messages($messages) {
        $messagestrs = array();
        $proper_messages = array();
        foreach($messages as $message) {
            if ($message instanceof AdminMessage) {
                $proper_messages []= $message;
            } else {
                if (is_array($message)) {
                    $message[0] = $smarty->get_config_vars($message[0]);
                    $str = call_user_func_array('sprintf', $message);
                    $proper_messages []= AdminMessage::with_raw_line('ok', array($str));
                } elseif (is_object($message)) {
                    $str = str($message);
                } else {
                    $str = str(new Translation($message));
                    if (empty($str)) $str = $message;
                }
                $messagestrs[] = $str;
            }
        }

        if ($messagestrs) {
            $proper_messages []= AdminMessage::with_raw_lines('ok', $messagestrs);
        }
        return $proper_messages;
    }

    function add_line($key) {
        $args = func_get_args();
        $key = array_shift($args);
        $this->parts []= array(
            'type'  => 'line',
            'text' => is_string($key) ? new Translation($key, $args) : $key
        );
    }

    function add_html($value) {
        $this->parts []= array(
            'type'  => 'html',
            'text' => $value
        );
    }

    function type() {
        return $this->type;
    }

    function html() {
        $html_parts = array();
        foreach($this->parts as $part) {
            if ($part['type'] == 'html') {
                $html_parts []= str($part['text']);
            } else {
                $html_parts []= htmlspecialchars(str($part['text']));
            }
        }
        return nl2br(join("\n", $html_parts));
    }

    function text() {
        $text_parts = array();
        foreach($this->parts as $part) {
            if ($part['type'] == 'html') {
                $text_parts []= strip_tags($part['text']);
            } else {
                $text_parts []= $part['text'];
            }
        }
        return join("\n", $text_parts);
    }
    
    function __toString() {
        return $this->text();
    }

    function has_parts() {
        return !empty($this->parts);
    }

}
