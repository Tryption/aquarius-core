#!/usr/bin/env php
<?php
/** This script exports aquarius-files and creates an installer pack
  *
  * The generated file can be uploaded to the webroot of a site and run from the
  * browser to extract the files.
  *
  * Usage of this script:
  *    aquarius/bin/packer all                # pack the full site
  *    aquarius/bin/packer site               # pack site-specific files such as frontend templates, css and pictures
  *    aquarius/bin/packer bare               # create update pack
  *    aquarius/bin/packer aquarius/templates # pack this path
  *    aquarius/bin/packer bare css           # multiple targets may be packed together
  *
  * The option --compress=bz|gz|no controls the compression used. 'bz' is
  * preset.
  *
  * When the option --inline is given, the archive is added as binary string
  * at the end of the installer file. This works most of the time, but some
  * versions of PHP choke on the binary string (see PHP bug #42396).
  */
  
require_once dirname(__FILE__).'/../lib/Aquarius_Loader.php';
$aquarius_loader = new Aquarius_loader();
$aquarius_loader->load('aquarius');
$aquarius_loader->load('globals');


function fail($msg) {
    echo $msg;
    exit(1);
}

array_shift($argv);
if (empty($argv)) {
    echo "Usage: aquarius/bin/packer [--inline] [--compress=bz|gz|no] PATH|ALIAS ...\n".
         "Available aliases: ".join(', ', array_keys(Aquarius_Packer::$export_aliases))."\n";
    exit;
}


$desired_exports = array();
$end_of_options = false;
$options = array();
foreach($argv as $opt) {
    if (substr($opt, 0, 2) != '--' || strlen($opt) == 2) $end_of_options = true;
    if ($end_of_options) {
        $desired_exports []= $opt;
    } else {
        $opt_parts = explode('=', $opt, 2);
        $options[substr($opt_parts[0], 2)] = isset($opt_parts[1]) ? $opt_parts[1] : true;
    }
}

$packer = new Aquarius_Packer();
$packer->message_handler = new Message_Outhouse();

try {
    $packer->pack($aquarius, $desired_exports, $options);
} catch (Exception $e) {
    echo $e->getMessage();
    exit(1);
}


class Message_Outhouse {
    function message($msg, $continued) {
        echo $msg;
        if (!$continued) echo "\n";
    }
}

